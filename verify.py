#!/usr/bin/env python3
"""
Script de verificaci√≥n para el Buscador de Noticias
Verifica que todo est√© listo para el deploy en Vercel
"""

import sys
import os
from pathlib import Path

def check_files():
    """Verifica que todos los archivos necesarios est√©n presentes"""
    print("üîç Verificando archivos del proyecto...")
    
    required_files = [
        'app.py',
        'requirements.txt',
        'vercel.json',
        'templates/index.html',
        'README.md'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
        else:
            print(f"  ‚úÖ {file_path}")
    
    if missing_files:
        print(f"  ‚ùå Archivos faltantes: {', '.join(missing_files)}")
        return False
    
    print("  ‚úÖ Todos los archivos necesarios est√°n presentes")
    return True

def check_syntax():
    """Verifica la sintaxis de Python"""
    print("\nüêç Verificando sintaxis de Python...")
    
    try:
        import py_compile
        py_compile.compile('app.py', doraise=True)
        print("  ‚úÖ app.py tiene sintaxis v√°lida")
        return True
    except py_compile.PyCompileError as e:
        print(f"  ‚ùå Error de sintaxis en app.py: {e}")
        return False

def check_env_vars():
    """Verifica las variables de entorno"""
    print("\nüîê Verificando configuraci√≥n de variables de entorno...")
    
    # Para desarrollo local
    news_api_key = os.environ.get('NEWS_API_KEY')
    secret_key = os.environ.get('SECRET_KEY')
    
    if news_api_key:
        print(f"  ‚úÖ NEWS_API_KEY configurada (longitud: {len(news_api_key)})")
    else:
        print("  ‚ö†Ô∏è  NEWS_API_KEY no encontrada localmente (debe estar en Vercel)")
    
    if secret_key:
        print(f"  ‚úÖ SECRET_KEY configurada (longitud: {len(secret_key)})")
    else:
        print("  ‚ö†Ô∏è  SECRET_KEY no encontrada localmente (debe estar en Vercel)")
    
    print("\nüìã Variables de entorno requeridas en Vercel:")
    print("  ‚Ä¢ NEWS_API_KEY: Tu clave de API de NewsAPI")
    print("  ‚Ä¢ SECRET_KEY: Clave secreta para Flask")
    
    return True

def check_dependencies():
    """Verifica las dependencias"""
    print("\nüì¶ Verificando dependencias...")
    
    try:
        with open('requirements.txt', 'r') as f:
            deps = f.read().strip().split('\n')
        
        print("  Dependencias en requirements.txt:")
        for dep in deps:
            if dep.strip():
                print(f"    ‚Ä¢ {dep.strip()}")
        
        print("  ‚úÖ requirements.txt es v√°lido")
        return True
    except Exception as e:
        print(f"  ‚ùå Error al leer requirements.txt: {e}")
        return False

def check_vercel_config():
    """Verifica la configuraci√≥n de Vercel"""
    print("\nüöÄ Verificando configuraci√≥n de Vercel...")
    
    try:
        import json
        with open('vercel.json', 'r') as f:
            config = json.load(f)
        
        print("  ‚úÖ vercel.json es JSON v√°lido")
        
        # Verificar estructura b√°sica
        if 'builds' in config and 'routes' in config:
            print("  ‚úÖ vercel.json tiene la estructura correcta")
        else:
            print("  ‚ö†Ô∏è  vercel.json podr√≠a tener problemas de estructura")
        
        return True
    except Exception as e:
        print(f"  ‚ùå Error al leer vercel.json: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç VERIFICACI√ìN DEL PROYECTO - BUSCADOR DE NOTICIAS")
    print("=" * 60)
    
    checks = [
        check_files(),
        check_syntax(),
        check_dependencies(),
        check_vercel_config(),
        check_env_vars()
    ]
    
    print("\n" + "=" * 60)
    
    if all(checks):
        print("üéâ ¬°PROYECTO LISTO PARA DEPLOY!")
        print("\nüìù Pr√≥ximos pasos:")
        print("1. Aseg√∫rate de que las variables de entorno est√©n configuradas en Vercel")
        print("2. Haz push de los cambios a tu repositorio")
        print("3. Deploy autom√°tico en Vercel")
        print("\nüåê URLs importantes:")
        print("‚Ä¢ Dashboard de Vercel: https://vercel.com/dashboard")
        print("‚Ä¢ NewsAPI: https://newsapi.org/")
        return 0
    else:
        print("‚ùå HAY PROBLEMAS QUE RESOLVER")
        print("Por favor, revisa los errores mostrados arriba")
        return 1

if __name__ == '__main__':
    sys.exit(main())