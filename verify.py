#!/usr/bin/env python3
"""
Script de verificaci√≥n para el APITube.io News Explorer
Verifica que todo est√© listo para el deploy en Vercel
"""

import sys
import os
from pathlib import Path

def check_files():
    """Verifica que todos los archivos necesarios est√©n presentes"""
    print("üîç Verificando archivos del proyecto...")
    
    required_files = [
        'app.py',
        'requirements.txt',
        'vercel.json',
        'templates/index.html',
        'README.md',
        'runtime.txt'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
        else:
            print(f"  ‚úÖ {file_path}")
    
    if missing_files:
        print(f"  ‚ùå Archivos faltantes: {', '.join(missing_files)}")
        return False
    
    print("  ‚úÖ Todos los archivos necesarios est√°n presentes")
    return True

def check_syntax():
    """Verifica la sintaxis de Python"""
    print("\nüêç Verificando sintaxis de Python...")
    
    try:
        import py_compile
        py_compile.compile('app.py', doraise=True)
        print("  ‚úÖ app.py tiene sintaxis v√°lida")
        return True
    except py_compile.PyCompileError as e:
        print(f"  ‚ùå Error de sintaxis en app.py: {e}")
        return False

def check_env_vars():
    """Verifica las variables de entorno para APITube.io"""
    print("\nüîê Verificando configuraci√≥n de variables de entorno...")
    
    # Para desarrollo local
    apitube_api_key = os.environ.get('APITUBE_API_KEY')
    secret_key = os.environ.get('SECRET_KEY')
    
    if apitube_api_key:
        print(f"  ‚úÖ APITUBE_API_KEY configurada (longitud: {len(apitube_api_key)})")
        if apitube_api_key.startswith('at_'):
            print("  ‚úÖ Formato de clave APITube.io correcto")
        else:
            print("  ‚ö†Ô∏è  Formato de clave podr√≠a ser incorrecto (debe empezar con 'at_')")
    else:
        print("  ‚ö†Ô∏è  APITUBE_API_KEY no encontrada localmente (debe estar en Vercel)")
    
    if secret_key:
        print(f"  ‚úÖ SECRET_KEY configurada (longitud: {len(secret_key)})")
    else:
        print("  ‚ö†Ô∏è  SECRET_KEY no encontrada localmente (debe estar en Vercel)")
    
    print("\nüìã Variables de entorno requeridas en Vercel:")
    print("  ‚Ä¢ APITUBE_API_KEY: Tu clave de API de APITube.io")
    print("  ‚Ä¢ SECRET_KEY: Clave secreta para Flask")
    
    print("\nüåü Ventajas de APITube.io:")
    print("  ‚Ä¢ 500,000+ fuentes verificadas vs ~80,000 de NewsAPI")
    print("  ‚Ä¢ 177 pa√≠ses vs ~54 de otras APIs")
    print("  ‚Ä¢ 60+ idiomas vs ~14 de competidores")
    print("  ‚Ä¢ 65+ par√°metros de filtrado vs ~10 b√°sicos")
    print("  ‚Ä¢ Actualizaciones en tiempo real")
    print("  ‚Ä¢ IA integrada para an√°lisis de sentimientos")
    
    return True

def check_dependencies():
    """Verifica las dependencias"""
    print("\nüì¶ Verificando dependencias...")
    
    try:
        with open('requirements.txt', 'r') as f:
            deps = f.read().strip().split('\n')
        
        print("  Dependencias en requirements.txt:")
        for dep in deps:
            if dep.strip():
                print(f"    ‚Ä¢ {dep.strip()}")
        
        print("  ‚úÖ requirements.txt es v√°lido para APITube.io")
        return True
    except Exception as e:
        print(f"  ‚ùå Error al leer requirements.txt: {e}")
        return False

def check_vercel_config():
    """Verifica la configuraci√≥n de Vercel"""
    print("\nüöÄ Verificando configuraci√≥n de Vercel...")
    
    try:
        import json
        with open('vercel.json', 'r') as f:
            config = json.load(f)
        
        print("  ‚úÖ vercel.json es JSON v√°lido")
        
        # Verificar estructura b√°sica
        if 'builds' in config and 'routes' in config:
            print("  ‚úÖ vercel.json tiene la estructura correcta")
        else:
            print("  ‚ö†Ô∏è  vercel.json podr√≠a tener problemas de estructura")
        
        return True
    except Exception as e:
        print(f"  ‚ùå Error al leer vercel.json: {e}")
        return False

def check_apitube_integration():
    """Verifica la integraci√≥n espec√≠fica con APITube.io"""
    print("\nüåê Verificando integraci√≥n con APITube.io...")
    
    try:
        with open('app.py', 'r') as f:
            content = f.read()
        
        if 'APITUBE_API_KEY' in content:
            print("  ‚úÖ Configuraci√≥n de APITube.io encontrada en app.py")
        else:
            print("  ‚ùå No se encontr√≥ configuraci√≥n de APITube.io")
            return False
            
        if 'api.apitube.io' in content:
            print("  ‚úÖ URL de APITube.io configurada correctamente")
        else:
            print("  ‚ùå URL de APITube.io no encontrada")
            return False
            
        if 'X-API-Key' in content:
            print("  ‚úÖ M√©todo de autenticaci√≥n correcto (X-API-Key header)")
        else:
            print("  ‚ö†Ô∏è  M√©todo de autenticaci√≥n podr√≠a estar mal configurado")
        
        print("  ‚úÖ Integraci√≥n con APITube.io parece correcta")
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error al verificar integraci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üåê VERIFICACI√ìN DEL PROYECTO - APITUBE.IO NEWS EXPLORER")
    print("=" * 65)
    
    checks = [
        check_files(),
        check_syntax(),
        check_dependencies(),
        check_vercel_config(),
        check_apitube_integration(),
        check_env_vars()
    ]
    
    print("\n" + "=" * 65)
    
    if all(checks):
        print("üéâ ¬°PROYECTO LISTO PARA DEPLOY CON APITUBE.IO!")
        print("\nüìù Pr√≥ximos pasos:")
        print("1. Obt√©n tu API Key gratis en https://apitube.io/")
        print("2. Configura APITUBE_API_KEY en las variables de entorno de Vercel")
        print("3. Configura SECRET_KEY en Vercel")
        print("4. Haz push de los cambios a tu repositorio")
        print("5. Deploy autom√°tico en Vercel")
        print("\nüåê URLs importantes:")
        print("‚Ä¢ APITube.io: https://apitube.io/")
        print("‚Ä¢ Documentaci√≥n: https://docs.apitube.io/")
        print("‚Ä¢ Dashboard Vercel: https://vercel.com/dashboard")
        print("‚Ä¢ Query Builder: https://docs.apitube.io/platform/news-api/query-builder")
        print("\nüöÄ ¬°Experimenta el poder de 500,000+ fuentes de noticias!")
        return 0
    else:
        print("‚ùå HAY PROBLEMAS QUE RESOLVER")
        print("Por favor, revisa los errores mostrados arriba")
        return 1

if __name__ == '__main__':
    sys.exit(main())